"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDefined = exports.getTransactionReceipt = exports.getBaseFee = exports.wait = void 0;
const errors_1 = require("../dataEntities/errors");
const wait = (ms) => new Promise(res => setTimeout(res, ms));
exports.wait = wait;
const getBaseFee = async (provider) => {
    const baseFee = (await provider.getBlock('latest')).baseFeePerGas;
    if (!baseFee) {
        throw new errors_1.ArbSdkError('Latest block did not contain base fee, ensure provider is connected to a network that supports EIP 1559.');
    }
    return baseFee;
};
exports.getBaseFee = getBaseFee;
/**
 * Waits for a transaction receipt if confirmations or timeout is provided
 * Otherwise tries to fetch straight away.
 * @param provider
 * @param txHash
 * @param confirmations
 * @param timeout
 * @returns
 */
const getTransactionReceipt = async (provider, txHash, confirmations, timeout) => {
    if (confirmations || timeout) {
        try {
            const receipt = await provider.waitForTransaction(txHash, confirmations, timeout);
            return receipt || null;
        }
        catch (err) {
            if (err.message.includes('timeout exceeded')) {
                // return null
                return null;
            }
            else
                throw err;
        }
    }
    else {
        const receipt = await provider.getTransactionReceipt(txHash);
        return receipt || null;
    }
};
exports.getTransactionReceipt = getTransactionReceipt;
const isDefined = (val) => typeof val !== 'undefined' && val !== null;
exports.isDefined = isDefined;
