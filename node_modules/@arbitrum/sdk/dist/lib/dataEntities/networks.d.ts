import { SignerOrProvider } from './signerOrProvider';
export interface L1Network extends Network {
    partnerChainIDs: number[];
    blockTime: number;
    isArbitrum: false;
}
export interface L2Network extends Network {
    tokenBridge: TokenBridge;
    ethBridge: EthBridge;
    partnerChainID: number;
    isArbitrum: true;
    confirmPeriodBlocks: number;
    retryableLifetimeSeconds: number;
    nitroGenesisBlock: number;
    nitroGenesisL1Block: number;
    /**
     * How long to wait (ms) for a deposit to arrive on l2 before timing out a request
     */
    depositTimeout: number;
}
export interface Network {
    chainID: number;
    name: string;
    explorerUrl: string;
    gif?: string;
    isCustom: boolean;
}
export interface TokenBridge {
    l1GatewayRouter: string;
    l2GatewayRouter: string;
    l1ERC20Gateway: string;
    l2ERC20Gateway: string;
    l1CustomGateway: string;
    l2CustomGateway: string;
    l1WethGateway: string;
    l2WethGateway: string;
    l2Weth: string;
    l1Weth: string;
    l1ProxyAdmin: string;
    l2ProxyAdmin: string;
    l1MultiCall: string;
    l2Multicall: string;
}
export interface EthBridge {
    bridge: string;
    inbox: string;
    sequencerInbox: string;
    outbox: string;
    rollup: string;
    classicOutboxes?: {
        [addr: string]: number;
    };
}
export interface L1Networks {
    [id: string]: L1Network;
}
export interface L2Networks {
    [id: string]: L2Network;
}
export declare const l1Networks: L1Networks;
export declare const l2Networks: L2Networks;
export declare const getL1Network: (signerOrProviderOrChainID: SignerOrProvider | number) => Promise<L1Network>;
export declare const getL2Network: (signerOrProviderOrChainID: SignerOrProvider | number) => Promise<L2Network>;
export declare const addCustomNetwork: ({ customL1Network, customL2Network, }: {
    customL1Network?: L1Network | undefined;
    customL2Network: L2Network;
}) => void;
/**
 * Registers a custom network that matches the one created by a Nitro local node. Useful in development.
 *
 * @see {@link https://github.com/OffchainLabs/nitro}
 */
export declare const addDefaultLocalNetwork: () => {
    l1Network: L1Network;
    l2Network: L2Network;
};
export declare const isL1Network: (network: L1Network | L2Network) => network is L1Network;
